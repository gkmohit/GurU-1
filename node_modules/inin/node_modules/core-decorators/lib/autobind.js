'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = autobind;

var _privateUtils = require('./private/utils');

function bind(fn, context) {
  if (fn.bind) {
    return fn.bind(context);
  } else {
    return function __autobind__() {
      return fn.apply(context, arguments);
    };
  }
}

function handleDescriptor(target, key, _ref) {
  var fn = _ref.value;

  if (typeof fn !== 'function') {
    throw new SyntaxError('@autobind can only be used on functions, not: ' + fn);
  }

  return {
    configurable: true,
    get: function get() {
      return this[key] = bind(fn, this);
    },
    set: function set(newValue) {
      if (this === target) {
        // New value directly set on the prototype.
        delete this[key];
        this[key] = newValue;
      } else {
        // New value set on a child object.

        // Cannot use assignment because it will call the setter on the
        // prototype.
        Object.defineProperty(this, key, {
          configurable: true,
          enumerable: true,
          value: newValue,
          writable: true
        });
      }
    }
  };
}

function autobind() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return (0, _privateUtils.decorate)(handleDescriptor, args);
}

module.exports = exports['default'];